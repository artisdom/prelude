
(defvar menuitem1
  ["Set mark!" (set-mark-command nil)]) ; Boring alias for C-SPC

(defvar menuitem2
  ["Show fireworks!" (lambda () (interactive) (message-box "Fun!"))]) ; Making function interactive

;;Menu with submenus.
(defvar menuitem3
  '("Submenu" ; Note that list must be quoted, otherwise it would be treated as function.
    ("SubSubmenu"
     ["This will do wonders" (lambda () (interactive) (beep)) [:help "Welcome to the banana"]]
     ["And this will do nothing" (lambda () (interactive))])
    ("SubSubmenu2"
     ["Boring alias" (replace-string " " " banana ")])))

(easy-menu-define test-menu nil "Menu used as an example."
  `("Test menu"
    ,menuitem1
    ,menuitem2
    ,menuitem3
    ["Items can also be defined here" (lambda () (interactive) (message-box "It's simple!"))]))

;;; Insert menu after options menu, in global menu bar.
(define-key-after (lookup-key global-map [menu-bar])
  [mymenu] ; shortcut for our menu
  (cons "Test menu" test-menu) 'options) ; Our menu's name in cons.


(defvar my-menu-bar-menu (make-sparse-keymap "Mine"))
(define-key global-map [menu-bar my-menu] (cons "Mine" my-menu-bar-menu))

(define-key my-menu-bar-menu [my-cmd1]
  '(menu-item "My Command 1" my-cmd1 :help "Do what my-cmd1 does"))
(define-key my-menu-bar-menu [my-cmd2]
  '(menu-item "My Command 2" my-cmd2 :help "Do what my-cmd2 does"))




; toolbar

(define-key global-map [tool-bar omar-button]
  '(menu-item "Hotel" omar-hotel
              :help "OMG Omar!"
              :image (image :type xpm :file "omar.xpm")))
(menu-item "Hotel" omar-hotel :help "OMG Omar!" :image (image :type xpm :file "omar.xpm"))

(defun omar-hotel ()
  "another nonce menu function"
  (interactive)
  (message "hotel, motel, holiday inn"))

(tool-bar-add-item "spell" 'omar-hotel
                   'omar-hotel
                   :help   "Run fonction omar-hotel")
